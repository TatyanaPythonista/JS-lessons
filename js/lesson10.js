'use strict';

// анонимные функции не могут быть объявлены просто без имени как Function Declaration, но могут быть
// через переменную

let anonym = function () {
    console.log('Это анонимная функция');
};

anonym();

// можно и НЕ анонимную функцию присвоить переменной, но вызвать по ее имени ее не получится, 
// только через переменную

let anonym2 = function annonimFunc () {
    console.log('Это анонимная функция');
};

// anonymFunc(); // будет ошибка потому что это имя существует только внутри переменной
anonym2();

// как вызвать анонимную функцию без всего этого? Вот так, со скобками - вызывается там же где объявлена

(function() {
    console.log('Это анонимная функция вызывается там же где объявлена');
})(); // Это называется функциональное выражение

// их часто используют при отложенном вызове, например, используя setTimeout - первый аргумент - функция,
// второй - время через задержки в милисек. Пример

setTimeout(function() {
    console.log('Это анонимная функция с отложенным вызывом');
}, 1000);

// Стрелочная функция - упрощенные анонимные функции. Пример

let anonym3 = () => console.log('это стрелочная функция');
anonym3();

// стрелочная функция может что-то возвращать как и обычная. Пример:

let anonym4 = () => 'это стрелочная функция, которая возвращает строку'; // return писать не надо
console.log(anonym4());

// но если надо вернуть несколько oператоров, которые принято обособлять в {}, надо поставить return. Пример

let anonym5 = () => {
    let greed = 'Привет', name = 'Таня'
    return greed + ', ' + name
};

console.log( anonym5() );

// в стрелочую функцию можно передать аргументы

let anonym6 = (greed, name) => { // здесь два аргумента и (.., ..) - обязательны, но если один,
    // то можно их убрать
    return greed + ', ' + name
};

console.log( anonym6('Здравствуй', 'Тася') );
