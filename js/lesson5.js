'use strict';

// Арифметические операции в JS

// Унарный оператор - оператор, который применяется в одному операнду. Например, -а.
// А бинарный к двум, например 10-a

let x = 2.8, y = 7.3;
console.log(x-y);

// Если в примере выше один из операндов сделать строкой, то результат не изменится, потому что при вычетании
// операнды автоматически преобразуются в числа, это отностится и к бинарным операторам и к унарным. Пример:

let a = '2.8', b = 7.3;
let arg = -a; // унарный оператор
console.log(arg, typeof arg); // после воздействия оператора '-' сторока стала числом

// Как оператор "-" действует на другие типы данных? Пример:

let c = true, d = null, e = undefined;
console.log(-c); // -1
console.log(-d); // -0
console.log(-e); // NaN
console.log(typeof -c, typeof -d, typeof -e); // number, number, number

// Далее оператор "+". Если операнд - числа, то просто математическая операция. А если один из них строка, то вот:

let f = '4', j = 7;
let sum = f + j;
console.log(sum, typeof sum); // конкатенация, как будто 2 строки и тип string

// Но если оператор "+" будет унарным, то строка преобразуется в число. Пример:

let h = '4';
let ch = +h;
console.log(ch, typeof ch); // 4, number

// это справедливо для любых типов данных. Пример:

let q = '3', w = 'не число', r = true, t = null, u = undefined;
console.log(typeof +q, typeof +w, typeof +r, typeof +t, typeof +u); // все number
console.log(+q, +w, +r, +t, +u); // 3, NaN, 1, 0, NaN

// так можно достаточно просто из строки сделать число

let i = '4', o = true;
console.log(+i + +o); // 5
console.log(i + o); // 4true

console.log(3+2+"2"); // 52 - операции выполняются слева на право

// След оператор деление '/'

let p = '2', s = 5;
console.log(p/s); // 0.4 автоматическое преобразование строки в число
console.log(p*s); // 10 также автоматическое преобразование

// если несколько арифметических операций, то приоритет как в математике

// % - остаток от деления

console.log(5 % 2); // 1

// возвеление в стапень '**'. степень может целое число и дробное (извлечение корня)

console.log( 4 ** 2 );

// ++ (инкремент) и -- (декремент)

let counter = 2, cnt = 5;
counter++; // (или ++counter) работает как counter = counter + 1
cnt--; // (или --cnt) работает как cnt = cnt - 1
console.log(counter, cnt) // 3, 4

// ++cnt (префиксный инкремент) и cnt++ (постпрефиксный инкремент) немного различаются. Пример:

let aa, bb, cc = 10, dd = 10;
aa = cc++; // 10 , так как здесь сначала присвоение (10), а потом сс++
bb = ++dd; // 11, сначала ++dd, а потом присвоение
console.log(aa, bb, cc, dd)

let ff = 4;
console.log(2 * ff++) // 8
console.log(2 * ++ff) // 12

// операторы +=, -=, /=, *= как в питоне
